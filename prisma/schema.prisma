// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String      @unique
  password      String
  boards        Board[]     @relation("BoardOwner")
  collaborators BoardUser[] @relation("UserBoards")
  tasks         Task[]      @relation("TaskAssignee")
  comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Board {
  id            Int         @id @default(autoincrement())
  name          String
  owner         User        @relation("BoardOwner", fields: [ownerId], references: [id])
  ownerId       Int
  lists         List[]      @relation("BoardLists")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  BoardUser     BoardUser[]
}

model BoardUser {
  id      Int   @id @default(autoincrement())
  board   Board @relation(fields: [boardId], references: [id])
  boardId Int
  user    User  @relation("UserBoards", fields: [userId], references: [id])
  userId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role    String @default("collaborator")
}

model List {
  id        Int      @id @default(autoincrement())
  name      String
  position  Int
  board     Board    @relation("BoardLists", fields: [boardId], references: [id])
  boardId   Int
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      String    @default("todo")
  dueDate     DateTime?
  position    Int
  list        List      @relation(fields: [listId], references: [id])
  listId      Int
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  Int?
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}
